#!/usr/bin/env python

import argparse
import sys

from punch import punch_config as cfr
from punch import version as ver
from punch import file_updater as fu

parser = argparse.ArgumentParser(description="Manages file content with versions.")
parser.add_argument('-c', '--config-file', action='store',
                    help="Config file", default="punch_config.py")
parser.add_argument('-v', '--version-file', action='store',
                    help="Version file", default="punch_version.py")
parser.add_argument('-p', '--part', action='store')
parser.add_argument('--verbose', action='store_true',
                    help="Be verbose")

args = parser.parse_args()

if args.part is None:
    print("Part is missing")
    sys.exit(1)

print("## Punch")

config = cfr.PunchConfig(args.config_file)
current_version = ver.Version.from_file(args.version_file, config.version)
new_version = current_version.copy()
new_version.inc(args.part)

# print(config.__config_version__)
# print(config.globals)
# print(config.files)

for i in current_version.keys:
    print(current_version.parts[i].name, current_version.parts[i].value)

print()

for i in new_version.keys:
    print(new_version.parts[i].name, new_version.parts[i].value)

for file_configuration in config.files:
    updater = fu.FileUpdater(file_configuration)
    updater.update(current_version.as_dict(), new_version.as_dict())

with open(args.version_file, 'w') as f:
    for i in new_version.keys:
        f.write('{name} = {value}\n'.format(name=new_version.parts[i].name, value=new_version.parts[i].value))
